<launch>
<arg name="map_file" default="world_simul"/>
# group ns1
<group ns="ns1">
  <!--Cartographer node with custom configuration file, premade pbstreakm-->
    <node name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" args="
          -configuration_directory
              $(find cartographer_ros)/configuration_files
          -configuration_basename carto_turtlebot_localization_ns1.lua
	  -load_state_filename /home/csw/$(arg map_file).pbstream" output="screen"> </node>

<!--node which converts Cartographer map into ROS occupancy grid map.-->
    <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros" type="cartographer_occupancy_grid_node" args="-resolution 0.05" />

<!-- provide tf base to scan -->
<node pkg="tf2_ros" type="static_transform_publisher" name="base_to_scan" args="0 0 0 0 0 0 robot1_tf/base_footprint robot1_tf/base_scan" />

</group>

# group ns2
<group ns="ns2">
  <!--Cartographer node with custom configuration file, premade pbstreakm-->
    <node name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" args="
          -configuration_directory
              $(find cartographer_ros)/configuration_files
          -configuration_basename carto_turtlebot_localization_ns2.lua
	  -load_state_filename /home/csw/$(arg map_file).pbstream" output="screen"> </node>

<!--node which converts Cartographer map into ROS occupancy grid map.-->
    <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros" type="cartographer_occupancy_grid_node" args="-resolution 0.05" />

<!-- provide tf base to scan -->
<node pkg="tf2_ros" type="static_transform_publisher" name="base_to_scan" args="0 0 0 0 0 0 robot2_tf/base_footprint robot2_tf/base_scan" />

</group>

<!-- run the preset rviz -->
<node name="rviz" pkg="rviz" type="rviz" args="-d /home/csw/carto_ws/src/carto_turtle_multi.rviz" />



</launch>
